// <auto-generated />
using System;
using CodeAnalytics.Engine.Storage.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeAnalytics.Engine.Storage.Migrations
{
    [DbContext(typeof(DbMainContext))]
    [Migration("20250927185425_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.DbFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.DbProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyName")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.DbSolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessModifier")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullPathName")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("UniqueIdHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.HasIndex("UniqueIdHash")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbolReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefinition")
                        .HasColumnType("boolean");

                    b.Property<int>("SpanIndex")
                        .HasColumnType("integer");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SymbolId");

                    b.ToTable("SymbolReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbFieldSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVolatile")
                        .HasColumnType("boolean");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId")
                        .IsUnique();

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.HasIndex("TypeSymbolId")
                        .IsUnique();

                    b.ToTable("FieldSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<int>("CyclomaticComplexity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConstructor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("boolean");

                    b.Property<long>("OverriddenSymbolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReturnTypeNullability")
                        .HasColumnType("smallint");

                    b.Property<long>("ReturnTypeSymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId")
                        .IsUnique();

                    b.HasIndex("OverriddenSymbolId")
                        .IsUnique();

                    b.HasIndex("ReturnTypeSymbolId")
                        .IsUnique();

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.ToTable("MethodSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbParameterSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasExplicitDefaultValue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThis")
                        .HasColumnType("boolean");

                    b.Property<int>("Modifiers")
                        .HasColumnType("integer");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId")
                        .IsUnique();

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.HasIndex("TypeSymbolId")
                        .IsUnique();

                    b.ToTable("ParameterSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("GetterSymbolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<long>("OverriddenSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReturnsByRef")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReturnsByRefReadonly")
                        .HasColumnType("boolean");

                    b.Property<long>("SetterSymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId")
                        .IsUnique();

                    b.HasIndex("GetterSymbolId")
                        .IsUnique();

                    b.HasIndex("OverriddenSymbolId")
                        .IsUnique();

                    b.HasIndex("SetterSymbolId")
                        .IsUnique();

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.HasIndex("TypeSymbolId")
                        .IsUnique();

                    b.ToTable("PropertySymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseClassSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BaseClassSymbolId")
                        .IsUnique();

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.ToTable("ClassSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbEnumSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnderlyingTypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.HasIndex("UnderlyingTypeSymbolId")
                        .IsUnique();

                    b.ToTable("EnumSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.ToTable("InterfaceSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbStructSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRef")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId")
                        .IsUnique();

                    b.ToTable("StructSymbols");
                });

            modelBuilder.Entity("DbClassSymbolDbInterfaceSymbol", b =>
                {
                    b.Property<long>("ImplementedByClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedByClassId", "ImplementedInterfacesId");

                    b.HasIndex("ImplementedInterfacesId");

                    b.ToTable("DbClassSymbolDbInterfaceSymbol");
                });

            modelBuilder.Entity("DbClassSymbolDbInterfaceSymbol1", b =>
                {
                    b.Property<long>("ImplementedDirectByClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedDirectInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedDirectByClassId", "ImplementedDirectInterfacesId");

                    b.HasIndex("ImplementedDirectInterfacesId");

                    b.ToTable("DbClassSymbolDbInterfaceSymbol1");
                });

            modelBuilder.Entity("DbFileDbProject", b =>
                {
                    b.Property<long>("FilesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("FilesId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("DbFileDbProject");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbInterfaceSymbol", b =>
                {
                    b.Property<long>("ImplementedByInterfaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedByInterfaceId", "ImplementedInterfacesId");

                    b.HasIndex("ImplementedInterfacesId");

                    b.ToTable("DbInterfaceSymbolDbInterfaceSymbol");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbInterfaceSymbol1", b =>
                {
                    b.Property<long>("ImplementedDirectByInterfaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedDirectInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedDirectByInterfaceId", "ImplementedDirectInterfacesId");

                    b.HasIndex("ImplementedDirectInterfacesId");

                    b.ToTable("DbInterfaceSymbolDbInterfaceSymbol1");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbStructSymbol", b =>
                {
                    b.Property<long>("ImplementedByStructId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedByStructId", "ImplementedInterfacesId");

                    b.HasIndex("ImplementedInterfacesId");

                    b.ToTable("DbInterfaceSymbolDbStructSymbol");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbStructSymbol1", b =>
                {
                    b.Property<long>("ImplementedDirectByStructId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImplementedDirectInterfacesId")
                        .HasColumnType("bigint");

                    b.HasKey("ImplementedDirectByStructId", "ImplementedDirectInterfacesId");

                    b.HasIndex("ImplementedDirectInterfacesId");

                    b.ToTable("DbInterfaceSymbolDbStructSymbol1");
                });

            modelBuilder.Entity("DbProjectDbProject", b =>
                {
                    b.Property<long>("ReferencedByProjectsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReferencedProjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("ReferencedByProjectsId", "ReferencedProjectsId");

                    b.HasIndex("ReferencedProjectsId");

                    b.ToTable("DbProjectDbProject");
                });

            modelBuilder.Entity("DbProjectDbSolution", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SolutionsId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectsId", "SolutionsId");

                    b.HasIndex("SolutionsId");

                    b.ToTable("DbProjectDbSolution");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbolReference", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbFile", "File")
                        .WithMany("SymbolReferences")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany("References")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbFieldSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbFieldSymbol", "ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbFieldSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbFieldSymbol", "TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", "ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "OverriddenSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", "OverriddenSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "ReturnTypeSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", "ReturnTypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbMethodSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("OverriddenSymbol");

                    b.Navigation("ReturnTypeSymbol");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbParameterSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbParameterSymbol", "ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbParameterSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbParameterSymbol", "TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "GetterSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "GetterSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "OverriddenSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "OverriddenSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "SetterSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "SetterSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Members.DbPropertySymbol", "TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("GetterSymbol");

                    b.Navigation("OverriddenSymbol");

                    b.Navigation("SetterSymbol");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "BaseClassSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", "BaseClassSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseClassSymbol");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbEnumSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbEnumSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "UnderlyingTypeSymbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbEnumSymbol", "UnderlyingTypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");

                    b.Navigation("UnderlyingTypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbStructSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", "Symbol")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbStructSymbol", "SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("DbClassSymbolDbInterfaceSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedByClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbClassSymbolDbInterfaceSymbol1", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbClassSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectByClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbFileDbProject", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbFile", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbInterfaceSymbolDbInterfaceSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedByInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DbInterfaceSymbolDbInterfaceSymbol_InterfaceSymbols_Implem~1");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbInterfaceSymbol1", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectByInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DbInterfaceSymbolDbInterfaceSymbol1_InterfaceSymbols_Imple~1");
                });

            modelBuilder.Entity("DbInterfaceSymbolDbStructSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbStructSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedByStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbInterfaceSymbolDbStructSymbol1", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbStructSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectByStructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Symbols.Types.DbInterfaceSymbol", null)
                        .WithMany()
                        .HasForeignKey("ImplementedDirectInterfacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProjectDbProject", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ReferencedByProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ReferencedProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProjectDbSolution", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.DbSolution", null)
                        .WithMany()
                        .HasForeignKey("SolutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.DbFile", b =>
                {
                    b.Navigation("SymbolReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Symbols.Common.DbSymbol", b =>
                {
                    b.Navigation("References");
                });
#pragma warning restore 612, 618
        }
    }
}
