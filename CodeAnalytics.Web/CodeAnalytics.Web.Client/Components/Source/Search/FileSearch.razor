@using CodeAnalytics.Web.Common.Enums.Explorer
@using CodeAnalytics.Web.Common.Models.Search
@using CodeAnalytics.Web.Common.Services.Search
@using CodeAnalytics.Web.Common.Threading
@using CodeAnalytics.Web.Client.Components.Common.Controls
@using CodeAnalytics.Web.Client.Models.Tags
@using CodeAnalytics.Web.Client.Components.Source.Search.Files
@using CodeAnalytics.Web.Common.Preferences.Interfaces
@using CodeAnalytics.Web.Common.Preferences.Search

@implements IDisposable

@inject IFileSearchService FileSearchService
@inject IPreferenceService Preferences

<div class="files">
   <div class="filter">
      <div class="types">
         <FilterTags Tags="@TypeTags" SelectionChanged="@OnTypeSelectionChanged" />
      </div>
   </div>
   <div class="contents">
      @foreach (var item in _results)
      {
         <FileResult Item="@item"></FileResult>
      }
   </div>
</div>

@code {
   
   private string? _searchText;
   [Parameter]
   public string? SearchText { get; set; }
   
   [Parameter] 
   public EventCallback<string?> SearchUpdated { get; set; }
   
   private List<ExplorerTreeItemSearchModel> _results = [];
   private bool _initialized = false;
   
   private string? _lastSearchText = string.Empty;
   private readonly Debouncer _debouncer = new ();

   protected override async Task OnParametersSetAsync()
   {
      _searchText = SearchText;
      if (_lastSearchText != _searchText)
      {
         _lastSearchText = _searchText;
         if (_initialized)
         {
            await OnFileSearch();
         }
      }
      await base.OnParametersSetAsync();
   }

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
      {
         await ApplyPreferences();
         await OnFileSearch();
         _initialized = true;
      }
   }
   
   private async Task OnTypeSelectionChanged(List<FilterTagModel> active)
   {
      await OnFileSearch();
   }
   
   private async Task OnFileSearch()
   {
      _ = Preferences.Update(await GetCurrentPreferences());
      _debouncer.Debounce(TimeSpan.FromMilliseconds(60), async (ct) =>
      {
         var response = await FileSearchService.GetFileSearch(new FileSearchParameters()
         {
            SearchText = _searchText ?? string.Empty,
            MaxResults = 100,
            Types = GetTypes()
         });

         _results = response;
         await InvokeAsync(StateHasChanged);
      });
   }
   
   public void Dispose()
   {
      _debouncer.Dispose();
   }

   private async Task ApplyPreferences()
   {
      var preference = await Preferences.GetOrCreate(GetCurrentPreferences);

      SearchText = preference.Data.SearchText;
      foreach (var (key, value) in _types)
      {
         value.IsActive = preference.Data.Types.Contains(key);
      }
      
      await SearchUpdated.InvokeAsync(SearchText);
   }

   private Task<FileSearchPreference> GetCurrentPreferences()
   {
      return Task.FromResult(new FileSearchPreference()
      {
         Version = Preferences.GetLatestVersion<FileSearchPreference>(),
         Data = new FileSearchPreferenceData()
         {
            SearchText = _lastSearchText,
            Types = _types.Where(x => x.Value.IsActive).Select(x => x.Key).ToHashSet(),
            ScrollTop = 0
         }
      });
   }
   
   private HashSet<ExplorerTreeItemType> GetTypes()
   {
      HashSet<ExplorerTreeItemType> types = [];

      foreach (var (key, value) in _types)
      {
         if (value.IsActive)
         {
            types.Add(key);
         }
      }
      
      return types;
   }

   private List<FilterTagModel> TypeTags => _types.Values.OrderBy(x => x.Order).ToList();
   private readonly Dictionary<ExplorerTreeItemType, FilterTagModel> _types = new Dictionary<ExplorerTreeItemType, FilterTagModel>()
   {
      [ExplorerTreeItemType.CsFile] = new () { Value = "cs-file", Name = ".cs files", IsActive = true, Order = 1 },
      [ExplorerTreeItemType.Folder] = new () { Value = "folder", Name = "folders", IsActive = true, Order = 2 },
   };
}