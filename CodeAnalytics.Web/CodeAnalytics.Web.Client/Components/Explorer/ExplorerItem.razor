@using System.ComponentModel
@using CodeAnalytics.Web.Common.Enums.Explorer
@using CodeAnalytics.Web.Common.Models.Explorer
@using CodeAnalytics.Web.Client.Components.Common.Symbols

@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div @ref="@_entryRef" class="entry@(Item.IsSelected ? " selected" : "")" @onclick="OnClickHeader">
   <div class="collapse">
      @if (Item.Type is ExplorerTreeItemType.Folder)
      {
         <Icon Name="@(Item.IsExpanded ? "keyboard_arrow_down" : "keyboard_arrow_right")" />
      }
   </div>
   <div class="icon">
      @switch (Item.Type)
      {
         case ExplorerTreeItemType.Folder:
            <Icon Name="@(Item.IsExpanded ? "folder_open" : "folder")" IsFilled Color="#ffdb74" />
            break;
         case ExplorerTreeItemType.CsFile:
            <Icon Name="code" Color="@GetFileColor(Item.Type)" IsFilled />
            break;
         default:
            throw new ArgumentOutOfRangeException();
      }
   </div>
   <div class="name" title="@Item.Name">
      @Item.Name
   </div>
</div>

@if (Item.Children.Count > 0 && Item.IsExpanded)
{
   <div class="increased">
      @foreach (var child in Item.Children)
      {
         <ExplorerItem Item="@child" ActivePath="@ActivePath"></ExplorerItem>
      }      
   </div>
}

@code {
   
   [Parameter, EditorRequired]
   public required ExplorerTreeItem Item { get; set; }

   private string? _activePath;
   [Parameter]
   public string? ActivePath
   {
      get => _activePath;
      set
      {
         if (value != _activePath)
         {
            _activePath = value;
            if (_activePath == Item.Path.Replace("\\", "/"))
            {
               _ = InvokeAsync(ScrollToView);
            }
         }
      }
   }

   private ElementReference? _entryRef;

   public void OnClickHeader()
   {
      if (Item.IsFolder)
      {
         Item.IsExpanded = !Item.IsExpanded;
         return;
      }
      
      Navigation.NavigateTo($"/source/{Item.Path}");
   }

   private async Task ScrollToView()
   {
      await JsRuntime.InvokeVoidAsync("scrollToElement", _entryRef);
   }
   
   private string GetFileColor(ExplorerTreeItemType type) => type switch
   {
      ExplorerTreeItemType.CsFile => "#5fad65",
      _ => "#ffffff"
   };

}