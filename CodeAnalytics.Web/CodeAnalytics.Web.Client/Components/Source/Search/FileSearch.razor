@using CodeAnalytics.Web.Common.Enums.Explorer
@using CodeAnalytics.Web.Common.Models.Search
@using CodeAnalytics.Web.Common.Services.Search
@using CodeAnalytics.Web.Common.Threading
@using CodeAnalytics.Web.Client.Components.Common.Controls
@using CodeAnalytics.Web.Client.Models.Tags

@implements IDisposable

@inject IFileSearchService FileSearchService

<div class="files">
   <div class="filter">
      <div class="types">
         <FilterTags Tags="@TypeTags" SelectionChanged="@OnTypeSelectionChanged" />
      </div>
   </div>
   <div class="contents">
      @foreach (var item in _results)
      {
         <div class="entry">
            <div class="icon">
               
            </div>
            <div class="name">
               @item.Item.Name
            </div>
         </div>
      }
   </div>
</div>

@code {
   
   private string? _searchText;
   [Parameter]
   public string? SearchText
   {
      get => _searchText;
      set
      {
         _searchText = value;
         if (_lastSearchText != _searchText)
         {
            _lastSearchText = _searchText;
            _ = InvokeAsync(OnFileSearch);
         }
      } 
   }
   
   private List<ExplorerTreeItemSearchModel> _results = [];
   
   private string? _lastSearchText = string.Empty;
   private readonly Debouncer _debouncer = new ();

   private HashSet<ExplorerTreeItemType> _selected = [
      ExplorerTreeItemType.CsFile, ExplorerTreeItemType.Folder
   ];
   
   private async Task OnTypeSelectionChanged(List<FilterTagModel> active)
   {
      await OnFileSearch();
   }
   
   private async Task OnFileSearch()
   {
      await _debouncer.Debounce(TimeSpan.FromMilliseconds(60), async (ct) =>
      {
         var response = await FileSearchService.GetFileSearch(new FileSearchParameters()
         {
            SearchText = _searchText ?? string.Empty,
            MaxResults = 100,
            Types = GetTypes()
         });

         _results = response;
         await InvokeAsync(StateHasChanged);
      });
   }
   
   public void Dispose()
   {
      _debouncer.Dispose();
   }

   private HashSet<ExplorerTreeItemType> GetTypes()
   {
      HashSet<ExplorerTreeItemType> types = [];

      foreach (var (key, value) in _types)
      {
         if (value.IsActive)
         {
            types.Add(key);
         }
      }
      
      return types;
   }

   private List<FilterTagModel> TypeTags => _types.Values.OrderBy(x => x.Order).ToList();
   private readonly Dictionary<ExplorerTreeItemType, FilterTagModel> _types = new Dictionary<ExplorerTreeItemType, FilterTagModel>()
   {
      [ExplorerTreeItemType.CsFile] = new () { Value = "cs-file", Name = ".cs files", IsActive = true, Order = 1 },
      [ExplorerTreeItemType.Folder] = new () { Value = "folder", Name = "folders", IsActive = true, Order = 2 },
   };
}