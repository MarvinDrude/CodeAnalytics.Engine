// <auto-generated />
using CodeAnalytics.Engine.Storage.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeAnalytics.Engine.Storage.Migrations
{
    [DbContext(typeof(DbMainContext))]
    partial class DbMainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "10.0.0-preview.6.25358.103");

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Common.SymbolDeclaration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FileReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProjectReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpanIndex")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileReferenceId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProjectReferenceId");

                    b.HasIndex("SymbolComponentId");

                    b.ToTable("SymbolDeclarations");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Common.ParameterComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConstructorComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MethodComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Modifier")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorComponentId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MethodComponentId");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("ParameterComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullPathName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NodeHash")
                        .IsUnique();

                    b.ToTable("SymbolComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ContainingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CyclomaticComplexity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassComponentId");

                    b.HasIndex("ContainingTypeId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InterfaceComponentId");

                    b.HasIndex("StructComponentId");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("ConstructorComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.EnumValueComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ContainingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsULong")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContainingTypeId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("EnumValueComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.FieldComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ContainingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConst")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassComponentId");

                    b.HasIndex("ContainingTypeId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InterfaceComponentId");

                    b.HasIndex("StructComponentId");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.HasIndex("TypeId")
                        .IsUnique();

                    b.ToTable("FieldComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ContainingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CyclomaticComplexity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InterfaceImplementationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOverride")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OverriddenMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassComponentId");

                    b.HasIndex("ContainingTypeId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InterfaceComponentId");

                    b.HasIndex("InterfaceImplementationId");

                    b.HasIndex("OverriddenMethodId")
                        .IsUnique();

                    b.HasIndex("StructComponentId");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.HasIndex("TypeId")
                        .IsUnique();

                    b.ToTable("MethodComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ContainingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GetterCyclomaticComplexity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasGetter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSetter")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InterfaceImplementationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OverriddenPropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetterCyclomaticComplexity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassComponentId");

                    b.HasIndex("ContainingTypeId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InterfaceComponentId");

                    b.HasIndex("InterfaceImplementationId");

                    b.HasIndex("OverriddenPropertyId")
                        .IsUnique();

                    b.HasIndex("StructComponentId");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("PropertyComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BaseClassId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseClassId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("ClassComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.EnumComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("EnumComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClassComponentId1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InterfaceComponentId1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StructComponentId1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassComponentId");

                    b.HasIndex("ClassComponentId1");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InterfaceComponentId");

                    b.HasIndex("InterfaceComponentId1");

                    b.HasIndex("StructComponentId");

                    b.HasIndex("StructComponentId1");

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("InterfaceComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRef")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SymbolComponentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolComponentId")
                        .IsUnique();

                    b.ToTable("StructComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.FileReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<long>("ProjectReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProjectReferenceId");

                    b.ToTable("FileReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProjectReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<long>("SolutionReferenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProjectReferenceId");

                    b.HasIndex("SolutionReferenceId");

                    b.ToTable("ProjectReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.SolutionReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("SolutionReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Common.SymbolDeclaration", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.FileReference", "FileReference")
                        .WithMany("SymbolDeclarations")
                        .HasForeignKey("FileReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", null)
                        .WithMany("SymbolDeclarations")
                        .HasForeignKey("ProjectReferenceId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithMany("SymbolDeclarations")
                        .HasForeignKey("SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileReference");

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Common.ParameterComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", "ConstructorComponent")
                        .WithMany("ParameterComponents")
                        .HasForeignKey("ConstructorComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "MethodComponent")
                        .WithMany("ParameterComponents")
                        .HasForeignKey("MethodComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Common.ParameterComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructorComponent");

                    b.Navigation("MethodComponent");

                    b.Navigation("SymbolComponent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("ConstructorComponents")
                        .HasForeignKey("ClassComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "ContainingType")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", "ContainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("ConstructorComponents")
                        .HasForeignKey("InterfaceComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("ConstructorComponents")
                        .HasForeignKey("StructComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingType");

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.EnumValueComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "ContainingType")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.EnumValueComponent", "ContainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.EnumValueComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingType");

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.FieldComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("FieldComponents")
                        .HasForeignKey("ClassComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "ContainingType")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.FieldComponent", "ContainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("FieldComponents")
                        .HasForeignKey("InterfaceComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("FieldComponents")
                        .HasForeignKey("StructComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.FieldComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "Type")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.FieldComponent", "TypeId");

                    b.Navigation("ContainingType");

                    b.Navigation("SymbolComponent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("MethodComponents")
                        .HasForeignKey("ClassComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "ContainingType")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "ContainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("MethodComponents")
                        .HasForeignKey("InterfaceComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "InterfaceImplementation")
                        .WithMany("InterfaceImplementations")
                        .HasForeignKey("InterfaceImplementationId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "OverriddenMethod")
                        .WithOne("OverridingMethod")
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "OverriddenMethodId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("MethodComponents")
                        .HasForeignKey("StructComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "Type")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", "TypeId");

                    b.Navigation("ContainingType");

                    b.Navigation("InterfaceImplementation");

                    b.Navigation("OverriddenMethod");

                    b.Navigation("SymbolComponent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("PropertyComponents")
                        .HasForeignKey("ClassComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "ContainingType")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", "ContainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("PropertyComponents")
                        .HasForeignKey("InterfaceComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", "InterfaceImplementation")
                        .WithMany("InterfaceImplementations")
                        .HasForeignKey("InterfaceImplementationId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", "OverriddenProperty")
                        .WithOne("OverridingProperty")
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", "OverriddenPropertyId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("PropertyComponents")
                        .HasForeignKey("StructComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingType");

                    b.Navigation("InterfaceImplementation");

                    b.Navigation("OverriddenProperty");

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", "BaseClass")
                        .WithOne("DerivedClass")
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", "BaseClassId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseClass");

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.EnumComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Types.EnumComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("DirectInterfaces")
                        .HasForeignKey("ClassComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("ClassComponentId1");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("InterfaceComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", null)
                        .WithMany("DirectInterfaces")
                        .HasForeignKey("InterfaceComponentId1");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("DirectInterfaces")
                        .HasForeignKey("StructComponentId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("StructComponentId1");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", "SymbolComponent")
                        .WithOne()
                        .HasForeignKey("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", "SymbolComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SymbolComponent");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.FileReference", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", "ProjectReference")
                        .WithMany("FileReferences")
                        .HasForeignKey("ProjectReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectReference");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", null)
                        .WithMany("ProjectReferences")
                        .HasForeignKey("ProjectReferenceId");

                    b.HasOne("CodeAnalytics.Engine.Storage.Models.Structure.SolutionReference", "SolutionReference")
                        .WithMany("ProjectReferences")
                        .HasForeignKey("SolutionReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolutionReference");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Common.SymbolComponent", b =>
                {
                    b.Navigation("SymbolDeclarations");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.ConstructorComponent", b =>
                {
                    b.Navigation("ParameterComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.MethodComponent", b =>
                {
                    b.Navigation("InterfaceImplementations");

                    b.Navigation("OverridingMethod");

                    b.Navigation("ParameterComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Members.PropertyComponent", b =>
                {
                    b.Navigation("InterfaceImplementations");

                    b.Navigation("OverridingProperty");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.ClassComponent", b =>
                {
                    b.Navigation("ConstructorComponents");

                    b.Navigation("DerivedClass");

                    b.Navigation("DirectInterfaces");

                    b.Navigation("FieldComponents");

                    b.Navigation("Interfaces");

                    b.Navigation("MethodComponents");

                    b.Navigation("PropertyComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.InterfaceComponent", b =>
                {
                    b.Navigation("ConstructorComponents");

                    b.Navigation("DirectInterfaces");

                    b.Navigation("FieldComponents");

                    b.Navigation("Interfaces");

                    b.Navigation("MethodComponents");

                    b.Navigation("PropertyComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Components.Types.StructComponent", b =>
                {
                    b.Navigation("ConstructorComponents");

                    b.Navigation("DirectInterfaces");

                    b.Navigation("FieldComponents");

                    b.Navigation("Interfaces");

                    b.Navigation("MethodComponents");

                    b.Navigation("PropertyComponents");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.FileReference", b =>
                {
                    b.Navigation("SymbolDeclarations");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.ProjectReference", b =>
                {
                    b.Navigation("FileReferences");

                    b.Navigation("ProjectReferences");

                    b.Navigation("SymbolDeclarations");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Models.Structure.SolutionReference", b =>
                {
                    b.Navigation("ProjectReferences");
                });
#pragma warning restore 612, 618
        }
    }
}
