// <auto-generated />
using System;
using CodeAnalytics.Engine.Storage.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeAnalytics.Engine.Storage.Migrations
{
    [DbContext(typeof(DbMainContext))]
    partial class DbMainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbProjectReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ReferencedProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferencedProjectId");

                    b.HasIndex("SourceProjectId");

                    b.ToTable("ProjectReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbSolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("RelativeFilePath")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessModifier")
                        .HasColumnType("smallint");

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullPathName")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("UniqueIdHash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.HasIndex("UniqueIdHash")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbolReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefinition")
                        .HasColumnType("boolean");

                    b.Property<int>("SpanIndex")
                        .HasColumnType("integer");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.ToTable("SymbolReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbFieldSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVolatile")
                        .HasColumnType("boolean");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.HasIndex("TypeSymbolId");

                    b.ToTable("FieldSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbMemberInterfaceImplementation", b =>
                {
                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("InterfaceSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("boolean");

                    b.HasKey("SymbolId", "InterfaceSymbolId");

                    b.HasIndex("InterfaceSymbolId");

                    b.HasIndex("SymbolId");

                    b.ToTable("MemberInterfaceImplementations");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbMethodSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CyclomaticComplexity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConstructor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("boolean");

                    b.Property<long>("OverriddenSymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReturnTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReturnTypeNullability")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OverriddenSymbolId");

                    b.HasIndex("ReturnTypeId");

                    b.ToTable("MethodSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbParameterSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasExplicitDefaultValue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParams")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThis")
                        .HasColumnType("boolean");

                    b.Property<int>("Modifiers")
                        .HasColumnType("integer");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.HasIndex("TypeSymbolId");

                    b.ToTable("ParameterSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbPropertySymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContainingSymbolId")
                        .HasColumnType("bigint");

                    b.Property<int>("GetterCyclomaticComplexity")
                        .HasColumnType("integer");

                    b.Property<long>("GetterMethodId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Nullability")
                        .HasColumnType("smallint");

                    b.Property<long>("OverriddenSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReturnsByRef")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReturnsByRefReadonly")
                        .HasColumnType("boolean");

                    b.Property<int>("SetterCylclomaticComplexity")
                        .HasColumnType("integer");

                    b.Property<long>("SetterMethodId")
                        .HasColumnType("bigint");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainingSymbolId");

                    b.HasIndex("GetterMethodId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OverriddenSymbolId");

                    b.HasIndex("SetterMethodId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("TypeSymbolId");

                    b.ToTable("PropertySymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbClassSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseClassSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BaseClassSymbolId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.ToTable("ClassSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbEnumSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnderlyingTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.HasIndex("UnderlyingTypeId");

                    b.ToTable("EnumSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbInterfaceSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.ToTable("InterfaceSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbStructSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRef")
                        .HasColumnType("boolean");

                    b.Property<long>("SymbolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SymbolId");

                    b.ToTable("StructSymbols");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbTypeInterface", b =>
                {
                    b.Property<long>("TypeSymbolId")
                        .HasColumnType("bigint");

                    b.Property<long>("InterfaceSymbolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDirect")
                        .HasColumnType("boolean");

                    b.HasKey("TypeSymbolId", "InterfaceSymbolId");

                    b.HasIndex("InterfaceSymbolId");

                    b.HasIndex("TypeSymbolId");

                    b.ToTable("TypeInterfaces");
                });

            modelBuilder.Entity("DbFileDbProject", b =>
                {
                    b.Property<long>("FilesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("FilesId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("DbFileDbProject");
                });

            modelBuilder.Entity("DbProjectDbSolution", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SolutionsId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectsId", "SolutionsId");

                    b.HasIndex("SolutionsId");

                    b.ToTable("DbProjectDbSolution");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbProjectReference", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", "ReferencedProject")
                        .WithMany()
                        .HasForeignKey("ReferencedProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", "SourceProject")
                        .WithMany("ProjectReferences")
                        .HasForeignKey("SourceProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferencedProject");

                    b.Navigation("SourceProject");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "ContainingTypeSymbol")
                        .WithMany("MemberSymbols")
                        .HasForeignKey("ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingTypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbolReference", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany("References")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbFieldSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithMany()
                        .HasForeignKey("ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithMany()
                        .HasForeignKey("TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbMemberInterfaceImplementation", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "InterfaceSymbol")
                        .WithMany("ImplementedByMembers")
                        .HasForeignKey("InterfaceSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany("MemberInterfaceImplementations")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterfaceSymbol");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbMethodSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "OverriddenSymbol")
                        .WithMany()
                        .HasForeignKey("OverriddenSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "ReturnType")
                        .WithMany()
                        .HasForeignKey("ReturnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverriddenSymbol");

                    b.Navigation("ReturnType");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbParameterSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithMany()
                        .HasForeignKey("ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany("ParameterSymbols")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithMany()
                        .HasForeignKey("TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Members.DbPropertySymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "ContainingSymbol")
                        .WithMany()
                        .HasForeignKey("ContainingSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "GetterMethod")
                        .WithMany()
                        .HasForeignKey("GetterMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "OverriddenSymbol")
                        .WithMany()
                        .HasForeignKey("OverriddenSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "SetterMethod")
                        .WithMany()
                        .HasForeignKey("SetterMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithMany()
                        .HasForeignKey("TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingSymbol");

                    b.Navigation("GetterMethod");

                    b.Navigation("OverriddenSymbol");

                    b.Navigation("SetterMethod");

                    b.Navigation("Symbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbClassSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "BaseClassSymbol")
                        .WithMany()
                        .HasForeignKey("BaseClassSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseClassSymbol");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbEnumSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "UnderlyingType")
                        .WithMany()
                        .HasForeignKey("UnderlyingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");

                    b.Navigation("UnderlyingType");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbInterfaceSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbStructSymbol", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Types.DbTypeInterface", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "InterfaceSymbol")
                        .WithMany("ImplementedByTypes")
                        .HasForeignKey("InterfaceSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", "TypeSymbol")
                        .WithMany("TypeInterfaces")
                        .HasForeignKey("TypeSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterfaceSymbol");

                    b.Navigation("TypeSymbol");
                });

            modelBuilder.Entity("DbFileDbProject", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbFile", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProjectDbSolution", b =>
                {
                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeAnalytics.Engine.Storage.Entities.Structure.DbSolution", null)
                        .WithMany()
                        .HasForeignKey("SolutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Structure.DbProject", b =>
                {
                    b.Navigation("ProjectReferences");
                });

            modelBuilder.Entity("CodeAnalytics.Engine.Storage.Entities.Symbols.Common.DbSymbol", b =>
                {
                    b.Navigation("ImplementedByMembers");

                    b.Navigation("ImplementedByTypes");

                    b.Navigation("MemberInterfaceImplementations");

                    b.Navigation("MemberSymbols");

                    b.Navigation("ParameterSymbols");

                    b.Navigation("References");

                    b.Navigation("TypeInterfaces");
                });
#pragma warning restore 612, 618
        }
    }
}
